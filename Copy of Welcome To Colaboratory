{"cells":[{"cell_type":"markdown","metadata":{"id":"5fCEDCU_qrC0"},"source":["Diabetic-Retinopathy Detection using Python\n","\n","By Divya.M\n","Karpagam College of Engineering"]},{"cell_type":"markdown","metadata":{"id":"GJBs_flRovLc"},"source":["Import Library"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gJr_9dXGpJ05"},"outputs":[],"source":["from scipy import misc\n","from PIL import Image\n","from skimage import exposure\n","from sklearn import svm\n","\n","import scipy\n","from math import sqrt,pi\n","from numpy import exp\n","from matplotlib import pyplot as plt\n","import numpy as np\n","import glob\n","import matplotlib.pyplot as pltss\n","import cv2\n","from matplotlib import cm\n","import pandas as pd\n","from math import pi, sqrt\n","import pywt\n"]},{"cell_type":"markdown","metadata":{"id":"2fhs6GZ4qFMx"},"source":["Import Data"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"29sjUxkep0lM"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-gE-Ez1qtyIA"},"outputs":[],"source":["#img_rows=img_cols=200\n","immatrix=[]\n","im_unpre = []\n","#image_path = Image.open('C:\\Users\\Rohan\\Desktop\\Diabetic_Retinopathy\\diaretdb1_v_1_1\\diaretdb1_v_1_1\\resources\\images\\ddb1_fundusimages\\image0')\n","#image = misc.imread(image_path)\n","\n","for i in range(1,90):\n","    img_pt = r'C:\\Users\\Rohan\\Desktop\\Diabetic_Retinopathy\\diaretdb1_v_1_1\\diaretdb1_v_1_1\\resources\\images\\ddb1_fundusimages\\image'\n","    if i < 10:\n","        img_pt = img_pt + \"00\" + str(i) + \".png\"\n","    else:\n","        img_pt = img_pt + \"0\" + str(i)+ \".png\"\n"]},{"cell_type":"markdown","metadata":{"id":"lSrWNr3MuFUS"},"source":["Describe Data"]},{"cell_type":"code","source":["    for i in range(1,90):\n","    img_pt = r'C:\\Users\\divya\\Desktop\\Diabetic_Retinopathy\\diaretdb1_v_1_1\\diaretdb1_v_1_1\\resources\\images\\ddb1_fundusimages\\image'\n","    if i < 10:\n","        img_pt = img_pt + \"00\" + str(i) + \".png\"\n","    else:\n","        img_pt = img_pt + \"0\" + str(i)+ \".png\""],"metadata":{"id":"_kN00W9BaFEZ","executionInfo":{"status":"error","timestamp":1691418826411,"user_tz":-330,"elapsed":612,"user":{"displayName":"","userId":""}},"outputId":"f6dff7d5-fcbb-4fb8-b2e8-e8dde7cdfcd8","colab":{"base_uri":"https://localhost:8080/","height":140}},"execution_count":null,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-9b6b81f43fe1>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    img_pt = r'C:\\Users\\divya\\Desktop\\Diabetic_Retinopathy\\diaretdb1_v_1_1\\diaretdb1_v_1_1\\resources\\images\\ddb1_fundusimages\\image'\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after 'for' statement on line 1\n"]}]},{"cell_type":"markdown","metadata":{"id":"UdRyKR44dcNI"},"source":["Data Visualization"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":140},"id":"C4HZx7Gndbrh","outputId":"0ac4ff0a-63a0-433e-aff9-4579e8f0a705","executionInfo":{"status":"error","timestamp":1691419048022,"user_tz":-330,"elapsed":420,"user":{"displayName":"","userId":""}}},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-8-d488254d8eb8>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    int np\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["\n","np.shape(np.array(equ).flatten())\n","np.shape(immatrix)\n","np.shape(equ)\n","plt.imshow(immatrix[78].reshape((1152,1500)),cmap='gray')\n","plt.show()\n","imm_dwt = []\n","for equ in immatrix:\n","    equ = equ.reshape((1152,1500))\n","    coeffs = pywt.dwt2(equ, 'haar')\n","    equ2 = pywt.idwt2(coeffs, 'haar')\n","    imm_dwt.append(np.array(\n","\n","np.shape(imm_dwt)\n","np.shape(equ2)\n","plt.imshow(imm_dwt[78].reshape((1152,1500)),cmap='gray')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"4_kCnsPUqS6o"},"source":["Define Target Variable (y) and Feature Variable (x)"]},{"cell_type":"code","source":["def _filter_kernel_mf_fdog(L, sigma, t = 3, mf = True):\n","    dim_y = int(L)\n","    dim_x = 2 * int(t * sigma)\n","    arr = np.zeros((dim_y, dim_x), 'f')\n","\n","    ctr_x = dim_x / 2\n","    ctr_y = int(dim_y / 2.)\n","\n","    # an un-natural way to set elements of the array\n","    # to their x coordinate.\n","    # x's are actually columns, so the first dimension of the iterator is used\n","    it = np.nditer(arr, flags=['multi_index'])\n","    while not it.finished:\n","        arr[it.multi_index] = it.multi_index[1] - ctr_x\n","        it.iternext()\n","\n","    two_sigma_sq = 2 * sigma * sigma\n","    sqrt_w_pi_sigma = 1. / (sqrt(2 * pi) * sigma)\n","    if not mf:\n","        sqrt_w_pi_sigma = sqrt_w_pi_sigma / sigma ** 2\n","\n","    #@vectorize(['float32(float32)'], target='cpu')\n","    def k_fun(x):\n","        return sqrt_w_pi_sigma * exp(-x * x / two_sigma_sq)\n","\n","    #@vectorize(['float32(float32)'], target='cpu')\n","    def k_fun_derivative(x):\n","        return -x * sqrt_w_pi_sigma * exp(-x * x / two_sigma_sq)\n","\n","    if mf:\n","        kernel = k_fun(arr)\n","        kernel = kernel - kernel.mean()\n","    else:\n","        kernel = k_fun_derivative(arr)\n","\n","    # return the \"convolution\" kernel for filter2D\n","    return cv2.flip(kernel, -1)\n","\n","def show_images(images,titles=None, scale=1.3):\n","    \"\"\"Display a list of images\"\"\"\n","    n_ims = len(images)\n","    if titles is None: titles = ['(%d)' % i for i in range(1,n_ims + 1)]\n","    fig = plt.figure()\n","    n = 1\n","    for image,title in zip(images,titles):\n","        a = fig.add_subplot(1,n_ims,n) # Make subplot\n","        if image.ndim == 2: # Is image grayscale?\n","            plt.imshow(image, cmap = cm.Greys_r)\n","        else:\n","            plt.imshow(cv2.cvtColor(image, cv2.COLOR_RGB2BGR))\n","        a.set_title(title)\n","        plt.axis(\"off\")\n","        n += 1\n","    fig.set_size_inches(np.array(fig.get_size_inches(), dtype=np.float) * n_ims / scale)\n","    plt.show()\n","\n","\n","def gaussian_matched_filter_kernel(L, sigma, t = 3):\n","    '''\n","    K =  1/(sqrt(2 * pi) * sigma ) * exp(-x^2/2sigma^2), |y| <= L/2, |x| < s * t\n","    '''\n","    return _filter_kernel_mf_fdog(L, sigma, t, True)\n","\n","#Creating a matched filter bank using the kernel generated from the above functions\n","def createMatchedFilterBank(K, n = 12):\n","    rotate = 180 / n\n","    center = (K.shape[1] / 2, K.shape[0] / 2)\n","    cur_rot = 0\n","    kernels = [K]\n","\n","    for i in range(1, n):\n","        cur_rot += rotate\n","        r_mat = cv2.getRotationMatrix2D(center, cur_rot, 1)\n","        k = cv2.warpAffine(K, r_mat, (K.shape[1], K.shape[0]))\n","        kernels.append(k)\n","\n","    return kernels\n","\n","#Given a filter bank, apply them and record maximum response\n","\n","def applyFilters(im, kernels):\n","\n","    images = np.array([cv2.filter2D(im, -1, k) for k in kernels])\n","    return np.max(images, 0)\n","\n","\n","gf = gaussian_matched_filter_kernel(20, 5)\n","bank_gf = createMatchedFilterBank(gf, 4)\n","\n","imm_gauss = []\n","for equ2 in imm_dwt:\n","    equ2 = equ2.reshape((1152,1500))\n","    equ3 = applyFilters(equ2,bank_gf)\n","    imm_gauss.append(np.array(equ3).flatten())"],"metadata":{"id":"CoHyAy05b1e-","executionInfo":{"status":"error","timestamp":1691419405904,"user_tz":-330,"elapsed":411,"user":{"displayName":"","userId":""}},"outputId":"75c948d3-3eca-4887-e4fe-3fb701b079bd","colab":{"base_uri":"https://localhost:8080/","height":245}},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-8544fcef5c2b>\u001b[0m in \u001b[0;36m<cell line: 91>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0mimm_gauss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mequ2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mimm_dwt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m     \u001b[0mequ2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mequ2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1152\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1500\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0mequ3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapplyFilters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mequ2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbank_gf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'imm_dwt' is not defined"]}]},{"cell_type":"code","source":["np.shape(imm_gauss)\n","plt.imshow(imm_gauss[78].reshape((1152,1500)),cmap='gray')\n","plt.show()\n"],"metadata":{"id":"_M-r--tOdlZ2","executionInfo":{"status":"error","timestamp":1691419573646,"user_tz":-330,"elapsed":479,"user":{"displayName":"","userId":""}},"outputId":"d9593cde-fdbd-4bbe-e23a-342400e203f2","colab":{"base_uri":"https://localhost:8080/","height":210}},"execution_count":null,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-5940b9b57292>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimm_gauss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimm_gauss\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m78\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1152\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1500\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'gray'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]},{"cell_type":"markdown","metadata":{"id":"OwuxHmxllTwN"},"source":["Train Test Split"]},{"cell_type":"code","source":["def createMatchedFilterBank():\n","    filters = []\n","    ksize = 31\n","    for theta in np.arange(0, np.pi, np.pi / 16):\n","        kern = cv2.getGaborKernel((ksize, ksize), 6, theta,12, 0.37, 0, ktype=cv2.CV_32F)\n","        kern /= 1.5*kern.sum()\n","        filters.append(kern)\n","    return filters\n","\n","def applyFilters(im, kernels):\n","    images = np.array([cv2.filter2D(im, -1, k) for k in kernels])\n","    return np.max(images, 0)\n","\n","bank_gf = createMatchedFilterBank()\n","#equx=equ3\n","#equ3 = applyFilters(equ2,bank_gf)\n","imm_gauss2 = []\n","for equ2 in imm_dwt:\n","    equ2 = equ2.reshape((1152,1500))\n","    equ3 = applyFilters(equ2,bank_gf)\n","    imm_gauss2.append(np.array(equ3).flatten())\n","# the array ranges from 0 - 89\n","np.shape(imm_gauss2)\n","plt.imshow(imm_gauss2[20].reshape((1152,1500)),cmap='gray')\n","plt.show()\n"],"metadata":{"id":"_2k6kOAud6mT","executionInfo":{"status":"error","timestamp":1691419671604,"user_tz":-330,"elapsed":424,"user":{"displayName":"","userId":""}},"outputId":"c3d458d8-3c68-4b1d-a7e8-6cdb5fa72b81","colab":{"base_uri":"https://localhost:8080/","height":245}},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-4bfab409a130>\u001b[0m in \u001b[0;36m<cell line: 18>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m#equ3 = applyFilters(equ2,bank_gf)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mimm_gauss2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mequ2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mimm_dwt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m     \u001b[0mequ2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mequ2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1152\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1500\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0mequ3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapplyFilters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mequ2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbank_gf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'imm_dwt' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"ufxBm1yRnruN"},"source":["Model Evaluation"]},{"cell_type":"code","source":["from sklearn.svm import SVC\n","clf = SVC()\n"],"metadata":{"id":"g_zP-szfeZRl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y = np.ones(89)\n"],"metadata":{"id":"Qj2p_7Ypedti"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["These corresponding Images are marked as non-effected in the data-set"],"metadata":{"id":"AVjzv_3MfFqW"}},{"cell_type":"code","source":["Y[1]=Y[5]=Y[7]=Y[17]=Y[6]=0"],"metadata":{"id":"9kCUUxwCfHNx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["SVM with Radial Basis Function (RBF)\n","\n","Linear SVM classifies the data by putting a hyper plane between the two classes. In the case of rbf SVM the plane would be in infinite dimension\n","\n"],"metadata":{"id":"zLBUcKWlfffZ"}},{"cell_type":"code","source":["clf.fit(imm_kmean, Y)\n"],"metadata":{"id":"yH25j5rKfhmK","executionInfo":{"status":"error","timestamp":1691420423266,"user_tz":-330,"elapsed":1278,"user":{"displayName":"","userId":""}},"outputId":"64e52639-40e8-453e-cd08-c570d70cfe78","colab":{"base_uri":"https://localhost:8080/","height":175}},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-c5a2945218ed>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimm_kmean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'imm_kmean' is not defined"]}]},{"cell_type":"markdown","source":["SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n","  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n","  max_iter=-1, probability=False, random_state=None, shrinking=True,\n","  tol=0.001, verbose=False)\n"],"metadata":{"id":"WuXpcW9lg5uD"}},{"cell_type":"code","source":["y_pred = clf.predict(imm_kmean)\n","k = [1,3,4,9,10,11,13,14,20,22,24,25,26,27,28,29,35,36,38,42,53,55,57,64,70,79,84,86]\n","k = k-np.ones(len(k))\n","k"],"metadata":{"id":"0uoL3lBhg4ub"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-Rh3-Vt9Nev9"},"source":["\n","Prediction"]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","neigh = KNeighborsClassifier(n_neighbors=3)\n","neigh.fit(imm_train, y_train)"],"metadata":{"id":"zRNuaY6Yib_r","executionInfo":{"status":"error","timestamp":1691420924287,"user_tz":-330,"elapsed":452,"user":{"displayName":"","userId":""}},"outputId":"43a59c79-dd72-4d17-a269-04474c90a599","colab":{"base_uri":"https://localhost:8080/","height":210}},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-5036b5a82f0d>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mneighbors\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mKNeighborsClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mneigh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKNeighborsClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_neighbors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mneigh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimm_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'imm_train' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"P-H6Lw1vyNNd"},"source":["Explaination"]},{"cell_type":"markdown","source":["observation of the retinal fundus either directly or through imaging techniques such as fundus photography or optical coherence tomography. There are several standard DR grading systems such as the Early Treatment Diabetic Retinopathy"],"metadata":{"id":"JKHY0piMkN2s"}},{"cell_type":"markdown","source":["Thank You\n","YBI Foundation"],"metadata":{"id":"4tgPHnwwklUE"}}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1691421790248}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}